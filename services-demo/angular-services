-Up to this point, we've been storing important data directly in the controller.
  -While this works, it has some disadvantages:
    -when the controller goes out of scope, we lose the data
    -that data cannot be easily accessed from other controllers or directives
    -the data is difficult to mock, which is important when writing automated tests

-https://docs.angularjs.org/guide/services

-Angular services are substitutable objects that are wired together using dependency injection (DI).
-we can use services to organize and share code across our app

-Angular services are:
  -Lazily instantiated – Angular only instantiates a service when an application component depends on it.
  -Singletons – Each component dependent on a service gets a reference to the single instance generated by the service factory.

  -Angular offers several useful services (like $http), but for most applications you'll also want to create your own.

Using a Service
-To use an Angular service, you add it as a dependency for the component (controller, service, filter or directive) that depends on the service.
  -Angular's dependency injection subsystem takes care of the rest
-see script.js

Creating Services
-Application developers are free to define their own services by registering the service's name and service factory function, with an Angular module
-The service factory function generates the single object or function that represents the service to the rest of the application.

-The object or function returned by the service is injected into any component (controller, service, filter or directive) that specifies a dependency on the service

Registering services
-Services are registered to modules via the Module API. Typically you use the Module factory API to register a service
  -see service-module.js
  -Note that you are not registering a service instance, but rather a factory function that will create this instance when called.

Dependencies
-Services can have their own dependencies.
  -Just like declaring dependencies in a controller, you declare dependencies by specifying them in the service's factory function signature.
