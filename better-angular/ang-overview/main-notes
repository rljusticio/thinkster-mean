Kicking the Tires
-Angular is not a library
-it is a JavaScript framework that embraces extending HTML into a more expressive and readable format

-allows us to decorate our HTML with special markup that synchronizes with our JavaScript leaving us to write our application logic instead of manually updating views
  -see ./ang-overview

A First Example: Data-Binding
-build a form to calculate the cost of an invoice in different currencies
-see ./ang-overview/data-binding.html
  -In Angular, a file like this is called a template.
  -When Angular starts your application, it parses and processes this new markup from the template using the compiler. -The loaded, transformed and rendered DOM is then called the view.

  -The first kind of new markup are the directives. They apply special behavior to attributes or elements in the HTML

  Custom directives to access the DOM
  -In Angular, the only place where an application should access the DOM is within directives.
  -This is important because artifacts that access the DOM are hard to test.
  -If you need to access the DOM directly you should write a custom directive for this.
    -The directives guide explains how to do this.

  -An expression in a template is a JavaScript-like code snippet that allows Angular to read and write variables.
  -Note that those variables are not global variables.
  -Just like variables in a JavaScript function live in a scope, Angular provides a scope for the variables accessible to expressions
    -The values that are stored in variables on the scope are referred to as the model in the rest of the documentation

  -Angular provides live bindings
    -Whenever the input values change, the value of the expressions are automatically recalculated and the DOM is updated with their values.
    -The concept behind this is two-way data binding

Adding UI Logic: Controllers
-see invoice.js and invoice.html

View-Independent business logic: Services
-Right now, the InvoiceController contains all logic of our example.
-When the application grows it is a good practice to move view-independent logic from the controller into a service, so it can be reused by other parts of the application as well.
-see invoice2.js

-moved the convertCurrency function and the definition of the existing currencies into the new file finance.js.

-how does the controller get a hold of the now separated function?
  -This is where Dependency Injection comes into play.
  -Dependency Injection (DI) is a software design pattern that deals with how objects and functions get created and how they get a hold of their dependencies

  -To use DI, there needs to be a place where all the things that should work together are registered.
    -In Angular, this is the purpose of the modules
    -When Angular starts, it will use the configuration of the module with the name defined by the ng-app directive, including the configuration of all modules that this module depends on

  -How does the InvoiceController get a reference to the currencyConverter function?
    -this is done by simply defining arguments on the constructor function
    -then the injector is able to create the objects in the right order and pass the previously created objects into the factories of the objects that depend on them

Accessing the Back-End
-
