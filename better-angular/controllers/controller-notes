Understanding Controllers
-a Controller is defined by a JavaScript constructor function that is used to augment the Angular Scope
-When a Controller is attached to the DOM via the ng-controller directive, Angular will instantiate a new Controller object, using the specified Controller's constructor function.
-A new child scope will be created and made available as an injectable parameter to the Controller's constructor function as $scope

-If the controller has been attached using the 'controller as' syntax then the controller instance will be assigned to a property on the new scope

-Use controllers to:
  -Set up the initial state of the $scope object
  -Add behavior to the $scope object

-Do not use controllers to:
  -Manipulate DOM — Controllers should contain only business logic. Putting any presentation logic into Controllers significantly affects its testability. Angular has databinding for most cases and directives to encapsulate manual DOM manipulation.

  -Format input — Use angular form controls instead.

  -Filter output — Use angular filters instead.

  -Share code or state across controllers — Use angular services instead.

  -Manage the life-cycle of other components (for example, to create service instances).

Setting the initial state of a $scope object
-when you create an application you need to set up the initial state for the Angular $scope
-set up the initial state of a scope by attaching properties to the $scope object
-The properties contain the view model (the model that will be presented by the view)
-All the $scope properties will be available to the template at the point in the DOM where the Controller is registered
-see greeting.html and greeting.js

Adding Behavior to a Scope Object
-In order to react to events or execute computation in the view we must provide behavior to the scope
-We add behavior to the scope by attaching methods to the $scope object.
  -These methods are then available to be called from the template/view.
-see behavior.html and behavior.js

Using Controllers Correctly
-a Controller shouldn't try to do too much.
  -It should contain only the business logic needed for a single view.

-keep controllers slim by encapsulating work that doesn't belong to controllers into services and then using these services in Controllers via dependency injection

Associating Controllers with Angular Scope Objects
-associate Controllers with scope objects implicitly via the ngController directive or $route service.

Simple Spicy Controller Example
-To illustrate further how Controller components work in Angular, let's create a little app with the following components:
  -A template with two buttons and a simple message
  -A model consisting of a string named spice
  -A Controller with two functions that set the value of spice
-see controller-example.js and controller-example.html

Spicy Arguments Example
-Controller methods can also take arguments
-see arguments.html and arguments.js

Scope Inheritance Example
-it is common to attach Controllers at different levels of the DOM hierarchy.
-Since the ng-controller directive creates a new child scope, we get a hierarchy of scopes that inherit from each other.
-The $scope that each Controller receives will have access to properties and methods defined by Controllers higher up the hierarchy
-see inheritance.html and inheritance.js
